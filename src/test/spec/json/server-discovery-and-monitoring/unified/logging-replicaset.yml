description: "standalone-logging"

schemaVersion: "1.13"

runOnRequirements:
  - topologies:
      - replicaset
    minServerVersion: "4.4" # awaitable hello

tests:
  - description: "Topology lifecycle"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                observeLogMessages:
                  topology: debug
                observeEvents:
                  - serverDescriptionChangedEvent
      # ensure the topology has been fully discovered before closing the client.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              previousDescription:
                type: Unknown # just look for 3 servers changing from unknown -> anything so the tests work for different RS configurations (e.g. arbiter vs no arbiter.)
          count: 3
      - name: close
        object: *client
    expectLogMessages:
      - client: *client
        messages:
          - level: debug
            component: topology
            data:
              message: "Starting topology monitoring"
              topologyId: { $$exists: true }
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # ReplicaSetNoPrimary topology
          # monitor rs member 1
          - level: debug
            component: topology
            data:
              message: "Starting server monitoring"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              # driverConnectionId: { $$exists: true } having the ID up front requires some refactoring for Rust, so commented out for now, but should be possible.
              serverConnectionId: { $$exists: false } # not yet known so shouldn't be present here.
              awaited: false # first heartbeat is never awaited
          # monitor rs member 2
          - level: debug
            component: topology
            data:
              message: "Starting server monitoring"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              # driverConnectionId: { $$exists: true } having the ID up front requires some refactoring for Rust, so commented out for now, but should be possible.
              serverConnectionId: { $$exists: false } # not yet known so shouldn't be present here.
              awaited: false # first heartbeat is never awaited
          # monitor rs member 3
          - level: debug
            component: topology
            data:
              message: "Starting server monitoring"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              # driverConnectionId: { $$exists: true } having the ID up front requires some refactoring for Rust, so commented out for now, but should be possible.
              serverConnectionId: { $$exists: false } # not yet known so shouldn't be present here.
              awaited: false # first heartbeat is never awaited
          - level: debug
            component: topology
            data:
              message: "Server heartbeat succeeded"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true } # TODO: only true on 4.2+... write separate tests for < 4.2 and > 4.2?
              awaited: false
              durationMS: { $$type: [int, long] }
              # TODO: this may implicitly require drivers increase max logged doc length in tests. we already say to do this
              # in the CLAM tests README, should prob mention in SDAM tests README too.
              reply: 
                $$matchAsDocument:
                  $$matchAsRoot:
                    ok: 1
          # mark first server with its type and start next awaitable hello
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # single topology
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: true # only 4.4+; would need separate version of test for < 4.4 with this false.
          - level: debug
            component: topology
            data:
              message: "Server heartbeat succeeded"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true } # TODO: only true on 4.2+... write separate tests for < 4.2 and > 4.2?
              awaited: false
              durationMS: { $$type: [int, long] }
              # TODO: this may implicitly require drivers increase max logged doc length in tests. we already say to do this
              # in the CLAM tests README, should prob mention in SDAM tests README too.
              reply: 
                $$matchAsDocument:
                  $$matchAsRoot:
                    ok: 1
          # mark second server with its type and start next awaitable hello
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # single topology
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: true # only 4.4+; would need separate version of test for < 4.4 with this false.
          - level: debug
            component: topology
            data:
              message: "Server heartbeat succeeded"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true } # TODO: only true on 4.2+... write separate tests for < 4.2 and > 4.2?
              awaited: false
              durationMS: { $$type: [int, long] }
              # TODO: this may implicitly require drivers increase max logged doc length in tests. we already say to do this
              # in the CLAM tests README, should prob mention in SDAM tests README too.
              reply: 
                $$matchAsDocument:
                  $$matchAsRoot:
                    ok: 1
          # mark third server with its type and start next awaitable hello
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # single topology
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: true # only 4.4+; would need separate version of test for < 4.4 with this false.
          - level: debug
            component: topology
            data:
              message: "Server heartbeat failed" # since client is shut down, this heartbeat should be canceled before hitting maxAwaitTimeMS. 
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: { $$type: bool }
              durationMS: { $$type: [int, long] }
              failure: { $$exists: true }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat failed" # since client is shut down, this heartbeat should be canceled before hitting maxAwaitTimeMS. 
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: { $$type: bool }
              durationMS: { $$type: [int, long] }
              failure: { $$exists: true }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat failed" # since client is shut down, this heartbeat should be canceled before hitting maxAwaitTimeMS. 
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true }
              awaited: { $$type: bool }
              durationMS: { $$type: [int, long] }
              failure: { $$exists: true }         
          - level: debug
            component: topology
            data:
              message: "Stopping topology monitoring"
              topologyId: { $$exists: true }
