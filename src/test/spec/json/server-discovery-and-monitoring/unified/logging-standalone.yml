description: "standalone-logging"

schemaVersion: "1.13"

runOnRequirements:
  - topologies:
      - single

# createEntities:
#   - client:
#       id: &client client
#       uriOptions:
#         heartbeatFrequencyMS: 500 # speed up heartbeats and therefore tests
#         appName: &appName loggingClient
#       observeLogMessages:
#         topology: debug
#   - database:
#       id: &database database
#       client: *client
#       databaseName: &databaseName logging-tests
#   - collection:
#       id: &collection collection
#       database: *database
#       collectionName: &collectionName server-selection
#   - client:
#       id: &failPointClient failPointClient

tests:
  - description: "Topology lifecycle"
    operations:
      - name: createEntities
        object: testRunner
        arguments:
          entities:
            - client:
                id: &client client
                observeLogMessages:
                  topology: debug
                observeEvents:
                  - serverDescriptionChangedEvent
      # ensure the topology has been fully discovered before closing the client.
      - name: waitForEvent
        object: testRunner
        arguments:
          client: *client
          event:
            serverDescriptionChangedEvent:
              newDescription:
                type: Standalone
          count: 1
      - name: close
        object: *client
    expectLogMessages:
      - client: *client
        messages:
          - level: debug
            component: topology
            data:
              message: "Starting topology monitoring"
              topologyId: { $$exists: true }
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # single topology
          - level: debug
            component: topology
            data:
              message: "Starting server monitoring"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat started"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: false } # not yet known so shouldn't be present here.
              awaited: { $$type: bool }
          - level: debug
            component: topology
            data:
              message: "Server heartbeat succeeded"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              driverConnectionId: { $$exists: true }
              serverConnectionId: { $$exists: true } # TODO: only true on 4.2+... write separate tests for < 4.2 and > 4.2?
              awaited: { $$type: bool }
              durationMS: { $$type: [int, long] }
              # TODO: this may implicitly require drivers increase max logged doc length in tests. we already say to do this
              # in the CLAM tests README, should prob mention in SDAM tests README too.
              reply: 
                $$matchAsDocument:
                  $$matchAsRoot:
                    ok: 1
          - level: debug
            component: topology
            data:
              message: "Topology description changed"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
              previousDescription:  { $$exists: true } # unknown topology
              newDescription: { $$exists: true } # single topology
          - level: debug
            component: topology
            data:
              message: "Stopping server monitoring"
              topologyId: { $$exists: true }
              serverHost: { $$type: string }
              serverPort: { $$type: [int, long] }
          - level: debug
            component: topology
            data:
              message: "Stopping topology monitoring"
              topologyId: { $$exists: true }
